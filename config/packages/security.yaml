security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: 'bcrypt'
            cost: 15

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        user_provider:
            entity:
                class: App\Entity\User

        client_provider:
            entity:
                class: App\Entity\Client

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        agent:
            pattern: ^/agent/
            provider: client_provider
            access_token:
                token_handler: App\Security\AccessTokenHandler

        main:
            lazy: true
            pattern: ^/
            provider: user_provider
            switch_user: false

            # Login attempts are limited on max_attempts (default: 5) failed requests
            # for IP address + username and 5 * max_attempts failed requests for IP address.
            #
            # Internally, Symfony uses the Rate Limiter component which by default uses
            # Symfony's cache to store the previous login attempts
            # https://symfony.com/doc/current/security.html#limiting-login-attempts
            login_throttling:
                max_attempts: 3
                interval: '15 minutes'

            form_login:
                login_path: security.auth.login
                check_path: security.auth.login
                enable_csrf: true

            logout:
                path: security.auth.logout
                target: security.auth.login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/healthcheck', roles: PUBLIC_ACCESS, requires_channel: '%env(REQUIRED_SCHEME)%' }
        - { path: '^/(en)/auth/login', roles: PUBLIC_ACCESS, requires_channel: '%env(REQUIRED_SCHEME)%' }
        - { path: '^/', roles: IS_AUTHENTICATED_FULLY, requires_channel: '%env(REQUIRED_SCHEME)%' }

    role_hierarchy:
        ROLE_ADMINISTRATOR: [ ROLE_USER ]

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
